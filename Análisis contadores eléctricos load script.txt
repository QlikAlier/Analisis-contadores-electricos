///$tab Main
SET ThousandSep='.';
SET DecimalSep=',';
SET MoneyThousandSep='.';
SET MoneyDecimalSep=',';
SET MoneyFormat='#.##0,00 €;-#.##0,00 €';
SET TimeFormat='h:mm:ss';
SET DateFormat='D/M/YYYY';
SET TimestampFormat='D/M/YYYY h:mm:ss[.fff]';
SET FirstWeekDay=0;
SET BrokenWeeks=0;
SET ReferenceDay=4;
SET FirstMonthOfYear=1;
SET CollationLocale='es-ES';
SET CreateSearchIndexOnReload=1;
SET MonthNames='ene.;feb.;mar.;abr.;may.;jun.;jul.;ago.;sept.;oct.;nov.;dic.';
SET LongMonthNames='enero;febrero;marzo;abril;mayo;junio;julio;agosto;septiembre;octubre;noviembre;diciembre';
SET DayNames='lun.;mar.;mié.;jue.;vie.;sáb.;dom.';
SET LongDayNames='lunes;martes;miércoles;jueves;viernes;sábado;domingo';
SET NumericalAbbreviation='3:k;6:M;9:G;12:T;15:P;18:E;21:Z;24:Y;-3:m;-6:μ;-9:n;-12:p;-15:f;-18:a;-21:z;-24:y';
///$tab Variables
//////////////////////////////////////////////////////////////////////
// Generador QVDs 
//
// Versión 	Fecha		Autor					Descripción
// 2.0.0	05/07/23	Florenci Gonzalez		Migració al cloud
// 2.0.32	26/09/24	Florenci Gonzalez		Creada funció SetPath per assignar la ruta dels QVD
/////////////////////////////////////////////////////////////////////

// Versión documento
Set vVersion = '2.0.32';

// Inclou funcions stàndard
$(Must_Include=lib://ALIER_DATA:DataFiles/SBO_procedures.qvs);

// Nombre de la ruta donde se guardan los QVDs
//>> 2.0.32	FGT 26/09/24
// if Right(DocumentTitle(), 4) = 'TEST' then
// 	Set vPath = 'TEST_DATA:DataFiles';
// Else
// 	Set vPath = 'ALIER_DATA:DataFiles';
// End If;

Call SetPath(DocumentTitle());
//<< 2.0.32	FGT 26/09/24

// Filtro fecha
Set vFecha = '01/01/2023';

// Connexión ODBC para las consultas SQL BBDD INYCOM
//LIB CONNECT TO 'ALIER_DATA:Microsoft_SQL_Server_(via_Direct_Access_gateway)_SRVINYCOM';
///$tab Contadores INYCOM
Qualify *;
Unqualify "id_sensor", "fecha", "MesFactura", "id_Categoria", "name", "Consumo", "hora consumo", "Categoria_sensor";

[dimCategorias]:
// LOAD id as id_Categoria, 
// 	Categoria;

// SELECT id,
// 	Categoria
// FROM "ALIERSA_ENERGY".dbo.dimCategorias;
LOAD
    id as id_Categoria,
    Categoria
FROM [lib://$(vPath)/dimCategorias.qvd]
(qvd);



// [dimReactiva]:
// LOAD [Fecha de entrada en vigor], 
// 	Orden, 
// 	[33%], 
// 	[75%];

// SELECT "Fecha de entrada en vigor",
// 	Orden,
// 	"33%",
// 	"75%"
// FROM "ALIERSA_ENERGY".dbo.dimReactiva;

[dimSensores]:
// LOAD ID as "id_sensor", 
//  	device_guid, 
// 	fk_engine_id, 
// 	name, 
// 	class, 
// 	description, 
// 	download, 
// 	obsolete, 
// 	last_datetime_read, 
// 	last_datetime_closes, 
//     id_Categoria;

// SQL SELECT ID,
// 	"device_guid",
// 	"fk_engine_id",
// 	name,
// 	class,
// 	description,
// 	download,
// 	obsolete,
// 	"last_datetime_read",
// 	"last_datetime_closes",
// 	"id_Categoria"
// FROM "ALIERSA_ENERGY".dbo.dimSensores
// 	where obsolete = 'NO';

    LOAD
        ID as "id_sensor", 
        device_guid,
        fk_engine_id,
        name,
        "class",
        description,
        download,
        obsolete,
        last_datetime_read,
        last_datetime_closes,
        id_Categoria
    FROM [lib://$(vPath)/dimSensores.qvd]
    (qvd)
    where obsolete = 'NO';


//******************************************************************
Concatenate(dimSensores)
	Load	
    "id_sensor" & '_1' as "id_sensor", 
 	//"dimSensores.device_guid", 
	//dimSensores.fk_engine_id, 
	"name", 
	//dimSensores.class, 
	//dimSensores.description, 
	//dimSensores.download, 
	//dimSensores.obsolete, 
	//dimSensores.last_datetime_read, 
	//dimSensores.last_datetime_closes,     
    if("id_sensor" = '3', '2', If("id_sensor" = '46', '4', Null())) as "id_Categoria"        
    Resident [dimSensores]
    where id_sensor = '3' or id_sensor = '46';
//******************************************************************

[MAP_CategoriaSensor]:
Mapping LOAD "id_sensor", 
	id_Categoria
	Resident dimSensores;

// [dimTablaAuxiliar]:
// LOAD DateKey,
// 	Date,
//     Timestamp(Date,'DD/MM/YYYY') as "fecha",
// 	DiaSemana, 
// 	DiaSemanaTexto, 
// 	Dia, 
// 	[DiaAño], 
// 	DiaMapa, 
// 	NumeroMes, 
// 	[Año], 
// 	[SemanaAño], 
// 	MesFactura, 
// 	IdHora, 
// 	Tiempo, 
// 	Hora, 
// 	Minuto, 
// 	NombreHora, 
// 	NombreMinuto, 
// 	HoraMinuto, 
// 	Periodo, 
// 	Contratada;

// SELECT DateKey,
// 	"Date",
// 	DiaSemana,
// 	DiaSemanaTexto,
// 	Dia,
// 	"DiaAño",
// 	DiaMapa,
// 	NumeroMes,
// 	"Año",
// 	"SemanaAño",
// 	MesFactura,
// 	IdHora,
// 	Tiempo,
// 	Hora,
// 	Minuto,
// 	NombreHora,
// 	NombreMinuto,
// 	HoraMinuto,
// 	Periodo,
// 	Contratada
// FROM "ALIERSA_ENERGY".dbo.dimTablaAuxiliar;

// [dimVariables]:
// LOAD ID, 
// 	fk_device_id as "id_sensor", 
// 	var_code, 
// 	description, 
// 	type, 
// 	units, 
// 	format, 
// 	download, 
// 	obsolete;

// SELECT ID,
// 	"fk_device_id",
// 	"var_code",
// 	description,
// 	type,
// 	units,
// 	format,
// 	download,
// 	obsolete
// FROM "ALIERSA_ENERGY".dbo.dimVariables;

// [Fact_DatosSensorActiva]:
// LOAD 
//     Timestamp(Fecha,'DD/MM/YYYY') as "fecha",
//     Timestamp(Fecha,'hh:mm') as "hora",
// 	Incremento, 
// 	Tramo, 
// 	Coste, 
// 	Sobrepotencia, 
// 	Identificador, 
// 	FechaUTC;

// SELECT Fecha,
// 	Incremento,
// 	Tramo,
// 	Coste,
// 	Sobrepotencia,
// 	Identificador,
// 	FechaUTC
// FROM "ALIERSA_ENERGY".dbo."Fact_DatosSensorActiva";

// [Fact_DatosSensorCapacitiva]:
// LOAD 
//     Timestamp(Fecha,'DD/MM/YYYY') as "fecha",
//     Timestamp(Fecha,'hh:mm') as "hora",
// 	kVarh, 
// 	Periodo, 
// 	coseno_phi, 
// 	Penalizable, 
// 	Identificador, 
// 	FechaUTC;

// SELECT Fecha,
// 	kVarh,
// 	Periodo,
// 	"coseno_phi",
// 	Penalizable,
// 	Identificador,
// 	FechaUTC
// FROM "ALIERSA_ENERGY".dbo."Fact_DatosSensorCapacitiva";

// [Fact_DatosSensorReactiva]:
// LOAD 
//     Timestamp(Fecha,'DD/MM/YYYY') as "fecha",
//     Timestamp(Fecha,'hh:mm') as "hora",
// 	kVarh, 
// 	Periodo, 
// 	coseno_phi, 
// 	Penalizable, 
// 	Identificador, 
// 	FechaUTC;

// SELECT Fecha,
// 	kVarh,
// 	Periodo,
// 	"coseno_phi",
// 	Penalizable,
// 	Identificador,
// 	FechaUTC
// FROM "ALIERSA_ENERGY".dbo."Fact_DatosSensorReactiva";

[FactDatosSensor]:
// LOAD
//     Timestamp(date_time,'DD/MM/YYYY') as "fecha",
//     Timestamp(date_time,'hh:mm') as "hora consumo",
// 	fk_device_id as "id_sensor", 
// 	VI1, 
// 	VI2, 
// 	VI3, 
// 	VI12, 
// 	VI23, 
// 	VI31, 
// 	AI1, 
// 	AI2, 
// 	AI3, 
// 	API1, 
// 	API2, 
// 	API3, 
// 	API, 
// 	IPI1, 
// 	IPI2, 
// 	IPI3, 
// 	IPI, 
// 	CPI1, 
// 	CPI2, 
// 	CPI3, 
// 	CPI, 
// 	RPI1, 
// 	RPI2, 
// 	RPI3, 
// 	RPI, 
// 	VAI1, 
// 	VAI2, 
// 	VAI3, 
// 	VAI, 
// 	PFI1, 
// 	PFI2, 
// 	PFI3, 
// 	PFI, 
// 	COSI, 
// 	DVI1, 
// 	DVI2, 
// 	DVI3, 
// 	DAI1, 
// 	DAI2, 
// 	DAI3, 
// 	HZI, 
// 	AE, 
// 	VAE, 
// 	CE, 
// 	IE, 
// 	RE, 
// 	Coste, 
// 	Tramo,
//     ConsumoLineas,
//     Consumo,
//     rangemax([VI1],[VI2],[VI3]) as "Tensión máxima",
//     rangemin([VI1],[VI2],[VI3]) as "Tensión mínima",
//     //API / 4 as "Consumo",    
//     //IF(ApplyMap('MAP_CategoriaSensor', fk_device_id) = 2 OR ApplyMap('MAP_CategoriaSensor', fk_device_id) = 7, Consumo, IF(fk_device_id = 3, -1*(Consumo), 0)) as "ConsumoMP2",
//     //IF(ApplyMap('MAP_CategoriaSensor', fk_device_id) = 4 OR ApplyMap('MAP_CategoriaSensor', fk_device_id) = 8, Consumo, IF(fk_device_id = 46, -1*(Consumo), 0)) as "ConsumoPulpers",   
//     (IPI/4000) + (RPI/4000) as "ConsumoReactivaInductiva",
//     ApplyMap('MAP_CategoriaSensor', fk_device_id) as "Categoria_sensor"
//     ;

// SELECT "date_time",
// 	"fk_device_id",
// 	VI1,
// 	VI2,
// 	VI3,
// 	VI12,
// 	VI23,
// 	VI31,
// 	AI1,
// 	AI2,
// 	AI3,
// 	API1,
// 	API2,
// 	API3,
// 	API,
// 	IPI1,
// 	IPI2,
// 	IPI3,
// 	IPI,
// 	CPI1,
// 	CPI2,
// 	CPI3,
// 	CPI,
// 	RPI1,
// 	RPI2,
// 	RPI3,
// 	RPI,
// 	VAI1,
// 	VAI2,
// 	VAI3,
// 	VAI,
// 	PFI1,
// 	PFI2,
// 	PFI3,
// 	PFI,
// 	COSI,
// 	DVI1,
// 	DVI2,
// 	DVI3,
// 	DAI1,
// 	DAI2,
// 	DAI3,
// 	HZI,
// 	AE,
// 	VAE,
// 	CE,
// 	IE,
// 	RE,
// 	Coste,
// 	Tramo,
//     ConsumoLineas,
//     Consumo
// FROM "ALIERSA_ENERGY".dbo.FactDatosSensor
// Where Consumo < 100000
// and date_time >= '2023-01-01 00:00:00.000';

    LOAD
        Timestamp(date_time,'DD/MM/YYYY') as "fecha",
        Timestamp(date_time,'hh:mm') as "hora consumo",
        fk_device_id as "id_sensor", 
        VI1, 
        VI2, 
        VI3, 
        VI12, 
        VI23, 
        VI31, 
        AI1, 
        AI2, 
        AI3, 
        API1, 
        API2, 
        API3, 
        API, 
        IPI1, 
        IPI2, 
        IPI3, 
        IPI, 
        CPI1, 
        CPI2, 
        CPI3, 
        CPI, 
        RPI1, 
        RPI2, 
        RPI3, 
        RPI, 
        VAI1, 
        VAI2, 
        VAI3, 
        VAI, 
        PFI1, 
        PFI2, 
        PFI3, 
        PFI, 
        COSI, 
        DVI1, 
        DVI2, 
        DVI3, 
        DAI1, 
        DAI2, 
        DAI3, 
        HZI, 
        AE, 
        VAE, 
        CE, 
        IE, 
        RE, 
        Coste, 
        Tramo,
        ConsumoLineas,
        Consumo,
        rangemax([VI1],[VI2],[VI3]) as "Tensión máxima",
        rangemin([VI1],[VI2],[VI3]) as "Tensión mínima",
        //API / 4 as "Consumo",    
        //IF(ApplyMap('MAP_CategoriaSensor', fk_device_id) = 2 OR ApplyMap('MAP_CategoriaSensor', fk_device_id) = 7, Consumo, IF(fk_device_id = 3, -1*(Consumo), 0)) as "ConsumoMP2",
        //IF(ApplyMap('MAP_CategoriaSensor', fk_device_id) = 4 OR ApplyMap('MAP_CategoriaSensor', fk_device_id) = 8, Consumo, IF(fk_device_id = 46, -1*(Consumo), 0)) as "ConsumoPulpers",   
        (IPI/4000) + (RPI/4000) as "ConsumoReactivaInductiva",
        ApplyMap('MAP_CategoriaSensor', fk_device_id) as "Categoria_sensor"
    FROM [lib://$(vPath)/FactDatosSensor.qvd]
    (qvd)
    Where Consumo < 100000 and date_time >= '2023-01-01';


//******************************************************************
Concatenate(FactDatosSensor)
	Load	
	"fecha",
	"id_sensor" & '_1' as "id_sensor", 	
    //FactDatosSensor.ConsumoLineas,
    (Consumo * -1) as Consumo,
    "hora consumo",
    ApplyMap('MAP_CategoriaSensor', "id_sensor" & '_1') as "Categoria_sensor"     
    Resident [FactDatosSensor]
    where id_sensor = '3' or id_sensor = '46';
//******************************************************************


// [Facturacion]:
// LOAD id, 
// 	[Año], 
// 	Mes, 
// 	EnergiaActiva, 
// 	EnergiaReactiva, 
// 	EnergiaCapacitiva, 
// 	Periodo_ini, 
// 	Periodo_fin, 
// 	Factura, 
// 	MesFactura, 
// 	SobrepotenciaP1, 
// 	SobrepotenciaP2, 
// 	SobrepotenciaP3, 
// 	SobrepotenciaP4, 
// 	SobrepotenciaP5, 
// 	SobrepotenciaP6, 
// 	E_ActivaP1, 
// 	E_ActivaP2, 
// 	E_ActivaP3, 
// 	E_ActivaP4, 
// 	E_ActivaP5, 
// 	E_ActivaP6, 
// 	E_ReactivaP1, 
// 	E_ReactivaP2, 
// 	E_ReactivaP3, 
// 	E_ReactivaP4, 
// 	E_ReactivaP5, 
// 	E_ReactivaP6;

// SELECT id,
// 	"Año",
// 	Mes,
// 	EnergiaActiva,
// 	EnergiaReactiva,
// 	EnergiaCapacitiva,
// 	"Periodo_ini",
// 	"Periodo_fin",
// 	Factura,
// 	MesFactura,
// 	SobrepotenciaP1,
// 	SobrepotenciaP2,
// 	SobrepotenciaP3,
// 	SobrepotenciaP4,
// 	SobrepotenciaP5,
// 	SobrepotenciaP6,
// 	"E_ActivaP1",
// 	"E_ActivaP2",
// 	"E_ActivaP3",
// 	"E_ActivaP4",
// 	"E_ActivaP5",
// 	"E_ActivaP6",
// 	"E_ReactivaP1",
// 	"E_ReactivaP2",
// 	"E_ReactivaP3",
// 	"E_ReactivaP4",
// 	"E_ReactivaP5",
// 	"E_ReactivaP6"
// FROM "ALIERSA_ENERGY".dbo.Facturacion;


// [FacturacionDia]:
// LOAD id, 
// 	[Año], 
// 	Mes, 
// 	Dia, 
// 	EnergiaActiva, 
// 	EnergiaReactiva, 
// 	EnergiaCapacitiva, 
// 	MesFactura, 
// 	Periodo_ini, 
// 	Periodo_fin, 
// 	Factura, 
// 	E_ReactivaP1, 
// 	E_ReactivaP2, 
// 	E_ReactivaP3, 
// 	E_ReactivaP4, 
// 	E_ReactivaP5, 
// 	E_ReactivaP6, 
// 	E_ActivaP1, 
// 	E_ActivaP2, 
// 	E_ActivaP3, 
// 	E_ActivaP4, 
// 	E_ActivaP5, 
// 	E_ActivaP6;

// SELECT id,
// 	"Año",
// 	Mes,
// 	Dia,
// 	EnergiaActiva,
// 	EnergiaReactiva,
// 	EnergiaCapacitiva,
// 	MesFactura,
// 	"Periodo_ini",
// 	"Periodo_fin",
// 	Factura,
// 	"E_ReactivaP1",
// 	"E_ReactivaP2",
// 	"E_ReactivaP3",
// 	"E_ReactivaP4",
// 	"E_ReactivaP5",
// 	"E_ReactivaP6",
// 	"E_ActivaP1",
// 	"E_ActivaP2",
// 	"E_ActivaP3",
// 	"E_ActivaP4",
// 	"E_ActivaP5",
// 	"E_ActivaP6"
// FROM "ALIERSA_ENERGY".dbo.FacturacionDia;

Unqualify *;
///$tab Producción
[LOTE]:	
    LOAD
    	//AutoNumberHash128(Floor("Fecha fin Honeywell"), "ItmsGrpCod", "Máquina", "Artículo") as "Filtro_key",
        "DistNumber",
        "Defectuoso",        
        Timestamp("Fecha fin Honeywell",'DD/MM/YYYY') as fecha,
        "Toneladas" as "Cantidad Tn",
        //*****
        //"ItmsGrpCod",
        //"ItmsGrpNam",
        "ItemCode",        
        "Artículo",
        "Máquina",
        //*****
        //"Toneladas electricidad",
        //"Toneladas vapor",
        //"Toneladas CO2",
        Date("Fecha fin Honeywell") as "Fecha fin Honeywell",
        //"FamilyCode",
        //"Peso Honeywell" as PESO_HONEYWELL,
        //"Peso báscula" as PESO_BASCULA,
        Cantidad as "Cantidad Kg"
        //"Tipo bobina"        
    FROM [lib://$(vPath)/LoteFabricacion.qvd]
    (qvd)
    Where "Fecha fin Honeywell" >= '$(vFecha)';
    
    //*****
    Left Join
    LOAD
        ItemCode,
        //"FamilyCode",
        //"FamilyName" as Familia,
        "U_SE_AP_CALP" as "QualityCode",
        "QualityName" as Calidad,
        "Grupo artículo",
        if(Len(Trim(U_SE_AP_CALP)) = 3 and Left(U_SE_AP_CALP,1) = 'H', 'Si', 'No') as "Calidad HighPerformance", 
        if(Left(U_SE_AP_CALP,2) = 'AB', 'Si', 'No') as "Calidad AB", 
        if(Left(U_SE_AP_CALP,2) = 'EB', 'Si', 'No') as "Calidad EB", 
        if(Left(U_SE_AP_CALP,2) = 'SS', 'Si', 'No') as "Calidad SS", 
        if(Left(U_SE_AP_CALP,2) = 'ES', 'Si', 'No') as "Calidad ES" 
    FROM [lib://$(vPath)/Items.qvd]
    (qvd);
    //*****
    
drop fields ItemCode from [LOTE];
    
///$tab Calidad
[CALIDAD]:
    LOAD
        //Date(U_SE_Fch) as [Fecha],
        Timestamp("U_SE_Fch",'DD/MM/YYYY') as fecha,
        DocEntry as "Nº análisis calidad"
    FROM [lib://$(vPath)/@SE_A2_ANCAL.qvd]
    (qvd)
    where U_SE_TipEsp = 8 and "U_SE_Modelo" = 'COGEN' and U_SE_Fch >= '$(vFecha)';

    left join 
    LOAD
        DocEntry as "Nº análisis calidad",
        U_SE_ValNum as [Consumo vapor MP2] 
    FROM [lib://$(vPath)/@SE_A2_ANCAL_PC.qvd]
    (qvd)
    where U_SE_ParCal = 'CVMP2';

    left join 
    LOAD
        DocEntry as "Nº análisis calidad",
        U_SE_ValNum as [Consumo vapor MP3] 
    FROM [lib://$(vPath)/@SE_A2_ANCAL_PC.qvd]
    (qvd)
    where U_SE_ParCal = 'CVMP3';

///$tab Degreedays
[DegreeDays]:
    LOAD
        Timestamp("fecha",'DD/MM/YYYY') as fecha,
        valor as "HDD15"
    FROM [lib://ALIER_DATA:DataFiles/degreedays_hdd15.xlsx]
    (ooxml, embedded labels, table is Sheet1);
///$tab Sección generada automáticamente
///$autogenerated


Unqualify *;

__countryGeoBase:
LOAD
	ISO3Code AS [__ISO3Code],
	ISO2Code AS [__ISO2Code],
	Polygon AS [__Polygon]
FROM [lib://DEV_TEST:DataFiles/countryGeo.qvd]
(qvd);

__countryCodeIsoTwo2Polygon:
MAPPING LOAD
	__ISO2Code,
	__Polygon
RESIDENT __countryGeoBase;

[LOTE_temp_afc4e41a-a09c-8b62-9f38-0ff772f2]:
LOAD
	[fecha],
	[DistNumber],
	[Defectuoso],
	[Cantidad Tn],
	[Artículo],
	[Máquina],
	[Fecha fin Honeywell],
	[Cantidad Kg],
	[QualityCode],
	[Calidad],
	[Grupo artículo],
	[Calidad HighPerformance],
	[Calidad AB],
	[Calidad EB],
	[Calidad SS],
	[Calidad ES],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([Calidad HighPerformance]), '-') AS [LOTE.Calidad HighPerformance_GeoInfo],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([Calidad AB]), '-') AS [LOTE.Calidad AB_GeoInfo],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([Calidad EB]), '-') AS [LOTE.Calidad EB_GeoInfo],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([Calidad SS]), '-') AS [LOTE.Calidad SS_GeoInfo],
	APPLYMAP( '__countryCodeIsoTwo2Polygon', UPPER([Calidad ES]), '-') AS [LOTE.Calidad ES_GeoInfo]
RESIDENT [LOTE];
DROP TABLE [LOTE];



TAG FIELD [Calidad HighPerformance] WITH '$geoname', '$relates_LOTE.Calidad HighPerformance_GeoInfo';
TAG FIELD [LOTE.Calidad HighPerformance_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Calidad HighPerformance';
TAG FIELD [Calidad AB] WITH '$geoname', '$relates_LOTE.Calidad AB_GeoInfo';
TAG FIELD [LOTE.Calidad AB_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Calidad AB';
TAG FIELD [Calidad EB] WITH '$geoname', '$relates_LOTE.Calidad EB_GeoInfo';
TAG FIELD [LOTE.Calidad EB_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Calidad EB';
TAG FIELD [Calidad SS] WITH '$geoname', '$relates_LOTE.Calidad SS_GeoInfo';
TAG FIELD [LOTE.Calidad SS_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Calidad SS';
TAG FIELD [Calidad ES] WITH '$geoname', '$relates_LOTE.Calidad ES_GeoInfo';
TAG FIELD [LOTE.Calidad ES_GeoInfo] WITH '$geopolygon', '$hidden', '$relates_Calidad ES';RENAME TABLE [LOTE_temp_afc4e41a-a09c-8b62-9f38-0ff772f2] to [LOTE];

DROP TABLES __countryGeoBase;
[autoCalendar]: 
  DECLARE FIELD DEFINITION Tagged ('$date')
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),
  Month($1) AS [Month] Tagged ('$month', '$cyclic'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),
  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),
  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),
  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),
  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),
  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,
  Year(Today())-Year($1) AS [YearsAgo] ,
  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,
  4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,
  Ceil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,
  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,
  12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,
  Month(Today())-Month($1) AS [MonthRelNo] ,
  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,
  (WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,
  Week(Today())-Week($1) AS [WeekRelNo] ;

DERIVE FIELDS FROM FIELDS [dimSensores.last_datetime_read], [fecha], [hora consumo], [Fecha fin Honeywell] USING [autoCalendar] ;